"""Правила видимости переменных"""


b = 7


def f1(a):
    print(a)
    print(b)


f1(5)


b = 6

def f2(a):
    print(a)
    global b
    print(b)  # UnboundLocalError: cannot access local variable 'b' where it is not associated with a value
    b = 9   # Переменная b локальна, потому что ей присваивается значение в теле функции

f2(3)


"""
Рассмотрим функцию avg , которая вычисляет среднее продолжающегося
ряда чисел, например среднюю цену закрытия биржевого товара за всю исто-
рию торгов. Каждый день ряд пополняется новой ценой, а при вычислении
среднего учитываются все прежние цены.
"""
# This is amazing!
def make_averager():
    series = []
    # zamykanie
    def averager(new_value):
        series.append(new_value)
        total = sum(series)
        return total / len(series)
    return averager

avg = make_averager()
print(avg(5))
print(avg(10))
print(avg(15))

"""
Лучше было бы хранить предыдущую сумму и количество элементов,
тогда, зная эти два числа, можно вычислить новое среднее.

"""

def make_averager_with_nonlocal():
    count = 0
    total = 0
    def averager(new_value):
        nonlocal count, total  # используем nonlocal чтобы не испортить замыкание перепривязкой 
        count += 1
        total += new_value
        print(total / count)
        return total / count
    return averager

new_avg_maker = make_averager_with_nonlocal()

new_avg_maker(5)
new_avg_maker(10)
new_avg_maker(15)

"""
Встретив определение функции, компилятор байт-кода Python определяет,
как найти встречающуюся в ней переменную x , руководствуясь следующими
правилами 1 :
 если имеется объявление global x , то x берется из него и присваивается
глобальной переменной x уровня модуля 2 ;
 если имеется объявление nonlocal x , то x берется из него и присваивается
локальной переменной x в ближайшей объемлющей функции, в которой
x определена;
 если x – параметр или ей присвоено значение в теле функции, то x – ло-
кальная переменная;
 если на x имеется ссылка, но значение ей не присвоено и параметром
она тоже не является, то:
 x ищется в локальных областях видимости тел объемлющих функ-
ций (нелокальных областях видимости);
 если она не найдена в объемлющих областях видимости, то читает-
ся из глобальной области видимости модуля;
 если она не найдена  и
"""