"""Двусторонние и другие очереди."""
from collections import deque


"""
Методы .append и .pop позволяют использовать список list как стек или очередь
(если вызывать только .append и .pop(0) , то получится дисциплина обслуживания
LIFO). Однако вставка и удаление элемента из левого конца списка (с индек-
сом 0) обходятся дорого, потому что приходится сдвигать весь список.
"""

"""
Класс collections.deque – это потокобезопасная двусторонняя очередь, пред-
назначенная для быстрой вставки и удаления из любого конца. Эта структу-
ра удобна и для хранения списка «последних виденных элементов» и прочего
в том же духе, т. к. deque можно сделать ограниченной (при создании задать
максимальную длину). Тогда по заполнении deque добавление новых элементов
приводит к удалению элементов с другого конца. В примере 2.23 показаны ти-
пичные операции со структурой deque .
"""

# Example:
dq = deque(range(10), maxlen=10)
print(dq)
# deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)

# В результате циклического сдвига с n > 0 элементы удаляются с правого
# конца и добавляются с левого; при n < 0 удаление производится с левого
# конца, а добавление – с правого.
dq.rotate(3)
print(dq)
# deque([7, 8, 9, 0, 1, 2, 3, 4, 5, 6], maxlen=10)
dq.rotate(-4)
print(dq)
# deque([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], maxlen=10)

# При добавлении элемента в заполненную очередь ( len(d) == d.maxlen ) про-
# исходит удаление с другого конца; обратите внимание, что в следующей
# строке элемент 0 отсутствует.
dq.appendleft(-1)
print(dq)
# deque([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)

# При добавлении трех элементов справа удаляются три элемента слева: –1,
# 1 и 2.
dq.extend([11, 22, 33])
print(dq)

# Отметим, что функция extendleft(iter) добавляет последовательные эле-
# менты из объекта iter в левый конец очереди, т. е. в итоге элементы будут
# размещены в порядке, противоположном исходному.
dq.extendleft((10, 20, 30, 40))
print(dq)
# deque([40, 30, 20, 10, 3, 4, 5, 6, 7, 8], maxlen=10)

"""
Но существует
и скрытая неэффективность: удаление элементов из середины deque произво-
дится медленно. Эта структура данных оптимизирована для добавления и уда-
ления элементов только с любого конца.
"""

"""
Операции append и popleft атомарны, поэтому deque можно безопасно исполь-
зовать как FIFO-очередь в многопоточных приложениях без явных блокировок.
"""

# Помимо deque , в стандартной библиотеке Python есть пакеты, реализующие
# другие виды очередей.

# queue
# Содержит синхронизированные (т. е. потокобезопасные) классы Queue ,
# LifoQueue и PriorityQueue. Они используются для безопасной коммуникации
# между потоками.

# multiprocessing
# очень похожие на аналоги в пакете queue , но предназна-
# ченные для межпроцессного взаимодействия.

# asyncio
# адаптирован для управления задачами в асинхронных программах.

# heapq
# В отличие от трех предыдущих модулей, heapq не содержит класса очере-
# ди, а предоставляет функции, в частности heappush и heappop , которые дают
# возможность работать с изменяемой последовательностью как с очередью
# с приоритетами, реализованной в виде пирамиды.
