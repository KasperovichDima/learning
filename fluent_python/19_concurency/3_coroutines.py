"""Using async."""
import asyncio
import itertools


async def spin(msg: str) -> None:  # 1
    for char in itertools.cycle(r'\|/-'):
        status = f'\r{char} {msg}'
        print(status, flush=True, end='')
        try:
            await asyncio.sleep(.15)  # 2 приостановить выполнение без блокировки других сопрограмм.
        except asyncio.CancelledError:  # 3 метод cancel объекта Task ->  asyncio.CancelledError
            break

    blanks = ' ' * len(status)
    print(f'\r{blanks}\r', end='')


async def slow() -> int:
    await asyncio.sleep(3)  # 4
    # import time
    # time.sleep(3)  # This will not allow our coroutine to start
    #                #  because main thread is blocked
    return 42

"""
Никогда не используйте time.sleep(…) в сопрограммах asyncio,
если не хотите приостановить всю программу в целом. Если со-
программа хочет потратить некоторое время, ничего не делая,
она должна вызвать await asyncio.sleep(DELAY). Так она уступит
управление циклу событий asyncio, который может дать порабо-
тать другим ожидающим сопрограммам.
"""

# 1
# Нам не нужен аргумент Event, который в spinner_thread.py (пример 19.1) ис-
# пользовался, чтобы просигнализировать о завершении slow.

# 2
# Использовать await asyncio.sleep(.1) вместо time.sleep(.1) , чтобы приостано-
# вить выполнение без блокировки других сопрограмм. См. эксперимент
# пос­ле этого примера.

# 3
# Когда вызывается метод cancel объекта Task , управляющего этой сопрограм-
# мой, возбуждается исключение asyncio.CancelledError. Время выходить из
# цикла.

# 4
# Сопрограмма slow также использует await asyncio.sleep вместо time.sleep.


async def supervisor() -> int:  # 3
    spinner = asyncio.create_task(spin('thinking!'))  # 4
    print(f'spinner object: {spinner}')  # 5
    result = await slow()  # 6
    spinner.cancel()  # 7
    return result


def main() -> None:  # 1
    result = asyncio.run(supervisor())  # 2
    print(f'Answer: {result}')


if __name__ == '__main__':
    main()


# 1
# main – единственная настоящая функция в этой программе, все остальные –
# сопрограммы.

# 2
# Функция asyncio.run запускает цикл событий, активирующий сопрограм-
# му, которая в конечном итоге приведет в действие и другие сопрограммы.
# Функция main остается блокированной, пока supervisor не вернет управле-
# ние. Значение, возвращенное supervisor , станет значением, возвращенным
# asyncio.run .

# 3
# Платформенные сопрограммы определяются с помощью ключевых слов
# async def.

# 4
# asyncio.create_task планирует выполнение spin сразу после возврата экзем-
# пляра asyncio.Task.

# 5
# Представление repr объекта spinner имеет вид <Task pending name='Task-2'
# coro=<spin() running at /path/to/spinner_async.py:11>>.

# 6
# Ключевое слово await вызывает slow , блокируя supervisor до возврата из slow .
# Значение, возвращенное slow , присваивается переменной result.

# 7
# Метод Task.cancel возбуждает исключение CancelledError внутри сопрограммы
# spin , как мы увидим в примере 19.5.

"""
В примере демонстрируется три основных способа выполнить сопрограмму:

asyncio.run(coro())
Вызывается из регулярной функции для управления объектом сопрограм-
мы, который обычно является точкой входа в весь асинхронный код про-
граммы, как supervisor в этом примере. Этот вызов блокирует выполнение,
пока coro не вернет управление. Функция run() возвращает значение, воз-
вращенное coro .

asyncio.create_task(coro())
Вызывается из сопрограммы, чтобы запланировать выполнение другой
сопрограммы. Этот вызов не приостанавливает текущую сопрограмму.
Он возвращает экземпляр Task – объект, который обертывает объект сопро-
граммы и предоставляет методы для управления ей и опроса ее состояния.

await coro()
Вызывается из сопрограммы, чтобы передать управление объекту сопро-
граммы, возвращенному coro(). Этот вызов приостанавливает текущую со-
программу до возврата из coro. Значением выражения await является значе-
ние, возвращенное coro.
"""

# Запомните: вызов сопрограммы как coro() сразу же возвращает
# объект сопрограммы, но не выполняет тело функции coro. Акти-
# вация тел сопрограмм – задача цикла событий.
